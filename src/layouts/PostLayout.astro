---
import BaseLayout from './BaseLayout.astro';
import Prose from '../components/Prose.astro';
import type { CollectionEntry } from 'astro:content';
import { getPostNavigation, formatDate, calculateReadingTime } from '../utils/blog';

export interface Props {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props;
const { title, date, categories, tags, excerpt, author } = post.data;

// Format date
const formattedDate = formatDate(date);

// Reading time estimation
const { Content, headings } = await post.render();
const wordCount = post.body.split(/\s+/g).length;
const readingTime = calculateReadingTime(post.body);

// Get navigation
const navigation = await getPostNavigation(post.slug);
---

<BaseLayout title={title} description={excerpt}>
  <article class="max-w-7xl mx-auto px-4 py-8">
    <header class="mb-16 pb-8 border-b border-slate-200 dark:border-slate-800">
      <h1 class="text-3xl lg:text-4xl font-bold tracking-tight text-slate-900 dark:text-slate-100 leading-tight mb-6">
        {title}
      </h1>
      
      <div class="flex flex-wrap items-center gap-6 text-sm text-slate-600 dark:text-slate-400 mb-6">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-slate-400 dark:text-slate-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
          </svg>
          <time datetime={date.toISOString()}>{formattedDate}</time>
        </div>
        
        {author && (
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4 text-slate-400 dark:text-slate-500" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
            </svg>
            <span>{author}</span>
          </div>
        )}
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-slate-400 dark:text-slate-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22C6.47,22 2,17.5 2,12A10,10 0 0,1 12,2M12.5,7V12.25L17,14.92L16.25,16.15L11,13V7H12.5Z"/>
          </svg>
          <span>{readingTime} min read</span>
        </div>
        
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-slate-400 dark:text-slate-500" fill="currentColor" viewBox="0 0 24 24">
            <path d="M14,17H7V15H14M17,13H7V11H17M17,9H7V7H17M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3Z"/>
          </svg>
          <span>{wordCount} words</span>
        </div>
      </div>
      
      {categories && categories.length > 0 && (
        <div class="flex flex-wrap items-center gap-3 mb-6">
          <span class="text-sm font-medium text-slate-700 dark:text-slate-300">Filed under:</span>
          {categories.map((category) => (
            <a 
              href={`/categories/${category.toLowerCase().replace(/\s+/g, '-')}`}
              class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 hover:bg-blue-100 dark:hover:bg-blue-900/50 transition-colors border border-blue-200 dark:border-blue-800"
            >
              {category}
            </a>
          ))}
        </div>
      )}


    </header>
    
    <!-- Table of Contents Toggle Controls (positioned below separator, aligned with TOC) -->
    {headings && headings.length > 0 && (
      <div class={`xl:gap-12 lg:gap-8 mb-6 ${headings && headings.length > 0 ? 'xl:grid xl:grid-cols-7 lg:grid lg:grid-cols-5' : ''}`}>
        <!-- Empty space for content column alignment -->
        <div class="xl:col-span-5 lg:col-span-4 xl:order-1 lg:order-1"></div>
        
        <!-- TOC Toggle Controls - aligned with TOC column -->
        <div class="xl:col-span-2 lg:col-span-1 xl:order-2 lg:order-2">
          <!-- TOC Toggle Button for Mobile -->
          <button 
            id="toc-toggle"
            class="toc-toggle-btn flex items-center gap-2 w-full lg:hidden px-3 py-2 bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 rounded-lg transition-colors text-sm font-medium text-slate-700 dark:text-slate-300 mb-4"
            aria-label="Toggle Table of Contents"
          >
            <svg class="w-4 h-4 text-slate-500 dark:text-slate-400" fill="currentColor" viewBox="0 0 24 24">
              <path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"/>
            </svg>
            <span id="toc-toggle-text">Show Table of Contents</span>
            <i id="toc-chevron" class="fas fa-chevron-down w-3 text-gray-400 transition-transform duration-200 ml-auto"></i>
          </button>

          <!-- TOC Toggle Button for Desktop -->
          <button 
            id="toc-toggle-desktop"
            class="toc-toggle-btn-desktop hidden lg:flex items-center gap-2 w-full px-3 py-2 bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 rounded-lg transition-colors text-sm font-medium text-slate-700 dark:text-slate-300 mb-4"
            aria-label="Toggle Table of Contents"
          >
            <svg class="w-4 h-4 text-slate-500 dark:text-slate-400" fill="currentColor" viewBox="0 0 24 24">
              <path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"/>
            </svg>
            <span id="toc-toggle-text-desktop">Hide Table of Contents</span>
            <i id="toc-chevron-desktop" class="fas fa-chevron-up w-3 text-gray-400 transition-transform duration-200 ml-auto"></i>
          </button>

          <!-- TOC Content for Mobile (shows when toggled) -->
          <div id="toc-content-mobile" class="toc-mobile lg:hidden overflow-hidden transition-all duration-300 ease-in-out max-h-0">
            <div class="bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg p-4 mt-4 max-h-[50vh] overflow-y-auto">
              <h3 class="text-sm font-semibold text-slate-900 dark:text-slate-100 mb-3 flex items-center gap-2">
                <svg class="w-4 h-4 text-slate-500 dark:text-slate-400" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"/>
                </svg>
                Table of Contents
              </h3>
              <ul class="space-y-1">
                {headings.filter(heading => heading.depth >= 2 && heading.depth <= 3).map((heading) => (
                  <li class={`text-sm ${heading.depth === 2 ? 'ml-0' : 'ml-3'}`}>
                    <a 
                      href={`#${heading.slug}`}
                      class={`
                        block text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100 
                        transition-colors duration-200 py-1.5 px-2 rounded hover:bg-slate-50 dark:hover:bg-slate-800
                        ${heading.depth === 2 ? 'font-medium' : 'font-normal'}
                        leading-tight
                      `}
                    >
                      {heading.text}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Main content area with Table of Contents -->
    <div class={`xl:gap-12 lg:gap-8 ${headings && headings.length > 0 ? 'xl:grid xl:grid-cols-7 lg:grid lg:grid-cols-5' : ''}`} id="main-content-grid">      <!-- Table of Contents - Desktop Sidebar Only -->
      {headings && headings.length > 0 && (
        <div class="xl:col-span-2 lg:col-span-1 xl:order-2 lg:order-2 hidden lg:block">
          <div id="toc-desktop-wrapper" class="overflow-hidden transition-all duration-300 ease-in-out">
            <div id="toc-content-desktop" class="toc sticky top-6 bg-white dark:bg-slate-900 border border-slate-200 dark:border-slate-700 rounded-lg p-4 max-h-[75vh] overflow-y-auto">
              <h3 class="text-sm font-semibold text-slate-900 dark:text-slate-100 mb-3 flex items-center gap-2">
                <svg class="w-4 h-4 text-slate-500 dark:text-slate-400" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"/>
                </svg>
                Table of Contents
              </h3>
              <ul class="space-y-0.5">
                {headings.filter(heading => heading.depth >= 2 && heading.depth <= 3).map((heading) => (
                  <li class={`text-xs ${heading.depth === 2 ? 'ml-0' : 'ml-2'}`}>
                    <a 
                      href={`#${heading.slug}`}
                      class={`
                        block text-slate-600 dark:text-slate-400 hover:text-slate-900 dark:hover:text-slate-100 
                        transition-colors duration-200 py-1 px-2 rounded hover:bg-slate-50 dark:hover:bg-slate-800
                        ${heading.depth === 2 ? 'font-medium' : 'font-normal'}
                        leading-tight
                      `}
                    >
                      {heading.text}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}
      
      <!-- Article content -->
      <div class={`xl:order-1 lg:order-1 ${headings && headings.length > 0 ? 'xl:col-span-5 lg:col-span-4' : 'xl:col-span-7 lg:col-span-5'}`} id="article-content">
        <Prose>
          <Content />
        </Prose>
      </div>
    </div>
    
    <!-- Custom styles for TOC and enhanced UI -->
    <style>
      /* TOC Show/Hide Animations */
      .toc-visible {
        opacity: 1;
        max-height: 50vh;
        transform: translateY(0);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
      }

      .toc-hidden {
        opacity: 0;
        max-height: 0;
        transform: translateY(-10px);
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        overflow: hidden;
        margin-top: 0 !important;
        margin-bottom: 0 !important;
        padding-top: 0 !important;
        padding-bottom: 0 !important;
        border-width: 0 !important;
      }

      /* Desktop TOC specific animations */
      @media (min-width: 1024px) {
        .toc-visible {
          max-height: 75vh;
        }
        
        .toc-hidden {
          transform: translateX(20px);
        }
      }

      /* Button transition improvements */
      .toc-toggle-btn,
      .toc-toggle-btn-desktop {
        transition: all 0.2s ease-in-out;
      }

      .toc-toggle-btn:hover,
      .toc-toggle-btn-desktop:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      :global(.dark) .toc-toggle-btn:hover,
      :global(.dark) .toc-toggle-btn-desktop:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
      }

      /* Chevron rotation animation */
      #toc-chevron,
      #toc-chevron-desktop {
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      /* Grid layout transitions */
      #main-content-grid {
        transition: grid-template-columns 0.3s ease-in-out;
      }

      #article-content {
        transition: all 0.3s ease-in-out;
      }

      /* TOC Scrollbar styling */
      .toc {
        scrollbar-width: thin;
        scrollbar-color: rgb(203 213 225) transparent;
      }
      
      .toc::-webkit-scrollbar {
        width: 3px;
      }
      
      .toc::-webkit-scrollbar-track {
        background: transparent;
      }
      
      .toc::-webkit-scrollbar-thumb {
        background-color: rgb(203 213 225);
        border-radius: 2px;
      }
      
      :global(.dark) .toc {
        scrollbar-color: rgb(71 85 105) transparent;
      }
      
      :global(.dark) .toc::-webkit-scrollbar-thumb {
        background-color: rgb(71 85 105);
      }
    </style>
    
    {tags && tags.length > 0 && (
      <footer class="mt-16 pt-8 border-t border-slate-200 dark:border-slate-800">
        <div class="mb-8">
          <h3 class="text-lg font-semibold mb-4 text-slate-900 dark:text-slate-100">Tags</h3>
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              <a 
                href={`/tags/${tag.toLowerCase().replace(/\s+/g, '-')}`}
                class="inline-flex items-center px-3 py-1.5 text-sm font-medium bg-slate-100 dark:bg-slate-800 text-slate-700 dark:text-slate-300 rounded-lg hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </div>
      </footer>
    )}
    
    <!-- Navigation between posts -->
    <nav class="mt-16 pt-8 border-t border-slate-200 dark:border-slate-800">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6 items-center">
        <div class="nav-previous">
          {navigation.previous ? (
            <a 
              href={`/posts/${navigation.previous.slug}`}
              class="group flex flex-col text-left p-4 rounded-lg border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 hover:border-slate-300 dark:hover:border-slate-700 hover:shadow-md transition-all duration-200"
            >
              <span class="text-sm text-slate-500 dark:text-slate-400 mb-1 font-medium">← Previous</span>
              <span class="font-semibold text-slate-900 dark:text-slate-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
                {navigation.previous.data.title}
              </span>
            </a>
          ) : (
            <div></div>
          )}
        </div>
        
        <div class="nav-home text-center">
          <a 
            href="/" 
            class="inline-flex items-center justify-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-semibold transition-colors duration-200 shadow-sm hover:shadow-md"
          >
            <i class="fas fa-home mr-2"></i>
            Back to Home
          </a>
        </div>
        
        <div class="nav-next">
          {navigation.next ? (
            <a 
              href={`/posts/${navigation.next.slug}`}
              class="group flex flex-col text-right p-4 rounded-lg border border-slate-200 dark:border-slate-800 bg-white dark:bg-slate-900 hover:border-slate-300 dark:hover:border-slate-700 hover:shadow-md transition-all duration-200"
            >
              <span class="text-sm text-slate-500 dark:text-slate-400 mb-1 font-medium">Next →</span>
              <span class="font-semibold text-slate-900 dark:text-slate-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors line-clamp-2">
                {navigation.next.data.title}
              </span>
            </a>
          ) : (
            <div></div>
          )}
        </div>
      </div>
    </nav>
  </article>

  <!-- TOC Toggle JavaScript -->
  <script>
    // TOC toggle functionality - using exact same pattern as sidebar categories
    function initTOCToggle() {
      const tocToggle = document.getElementById('toc-toggle');
      const tocToggleDesktop = document.getElementById('toc-toggle-desktop');
      const tocContentMobile = document.getElementById('toc-content-mobile');
      const tocDesktopWrapper = document.getElementById('toc-desktop-wrapper');
      const tocToggleText = document.getElementById('toc-toggle-text');
      const tocToggleTextDesktop = document.getElementById('toc-toggle-text-desktop');
      const tocChevron = document.getElementById('toc-chevron');
      const tocChevronDesktop = document.getElementById('toc-chevron-desktop');
      const mainContentGrid = document.getElementById('main-content-grid');
      const articleContent = document.getElementById('article-content');

      let isMobileVisible = false;
      let isDesktopVisible = window.innerWidth >= 1024; // Desktop TOC is visible by default
      
      function updateMobileTOCVisibility(visible) {
        if (tocContentMobile) {
          if (visible) {
            // Expand using the exact same pattern as sidebar categories
            tocContentMobile.style.maxHeight = tocContentMobile.scrollHeight + 'px';
          } else {
            // Collapse using the exact same pattern as sidebar categories
            tocContentMobile.style.maxHeight = '0px';
          }
        }
        
        // Update toggle button text
        if (tocToggleText) {
          tocToggleText.textContent = visible ? 'Hide Table of Contents' : 'Show Table of Contents';
        }
        
        // Update chevron using exact same pattern as sidebar categories
        if (tocChevron) {
          if (visible) {
            tocChevron.classList.remove('fa-chevron-down');
            tocChevron.classList.add('fa-chevron-up');
          } else {
            tocChevron.classList.remove('fa-chevron-up');
            tocChevron.classList.add('fa-chevron-down');
          }
        }
        
        isMobileVisible = visible;
        localStorage.setItem('toc-mobile-visible', visible.toString());
      }

      function updateDesktopTOCVisibility(visible) {
        if (tocDesktopWrapper) {
          if (visible) {
            // Show with smooth animation using maxWidth and opacity
            tocDesktopWrapper.style.maxWidth = 'none';
            tocDesktopWrapper.style.opacity = '1';
          } else {
            // Hide with smooth animation using maxWidth and opacity
            tocDesktopWrapper.style.maxWidth = '0px';
            tocDesktopWrapper.style.opacity = '0';
          }
        }
        
        // Update toggle button text
        if (tocToggleTextDesktop) {
          tocToggleTextDesktop.textContent = visible ? 'Hide Table of Contents' : 'Show Table of Contents';
        }
        
        // Update chevron using exact same pattern as sidebar categories
        if (tocChevronDesktop) {
          if (visible) {
            tocChevronDesktop.classList.remove('fa-chevron-down');
            tocChevronDesktop.classList.add('fa-chevron-up');
          } else {
            tocChevronDesktop.classList.remove('fa-chevron-up');
            tocChevronDesktop.classList.add('fa-chevron-down');
          }
        }

        // Adjust main content layout
        if (mainContentGrid && window.innerWidth >= 1024) {
          if (visible) {
            // Show TOC: normal grid layout
            mainContentGrid.classList.remove('xl:grid-cols-1', 'lg:grid-cols-1');
            mainContentGrid.classList.add('xl:grid-cols-7', 'lg:grid-cols-5');
            if (articleContent) {
              articleContent.classList.remove('xl:col-span-7', 'lg:col-span-5');
              articleContent.classList.add('xl:col-span-5', 'lg:col-span-4');
            }
          } else {
            // Hide TOC: full width content
            mainContentGrid.classList.remove('xl:grid-cols-7', 'lg:grid-cols-5');
            mainContentGrid.classList.add('xl:grid-cols-1', 'lg:grid-cols-1');
            if (articleContent) {
              articleContent.classList.remove('xl:col-span-5', 'lg:col-span-4');
              articleContent.classList.add('xl:col-span-7', 'lg:col-span-5');
            }
          }
        }
        
        isDesktopVisible = visible;
        localStorage.setItem('toc-desktop-visible', visible.toString());
      }
      
      // Load saved preferences
      const savedMobileVisibility = localStorage.getItem('toc-mobile-visible');
      if (savedMobileVisibility !== null) {
        isMobileVisible = savedMobileVisibility === 'true';
      }

      const savedDesktopVisibility = localStorage.getItem('toc-desktop-visible');
      if (savedDesktopVisibility !== null) {
        isDesktopVisible = savedDesktopVisibility === 'true';
      }
      
      // Apply initial states
      updateMobileTOCVisibility(isMobileVisible);
      updateDesktopTOCVisibility(isDesktopVisible);
      
      // Mobile toggle - using exact same event handling pattern as sidebar categories
      if (tocToggle && tocContentMobile && tocChevron) {
        tocToggle.addEventListener('click', (e) => {
          e.preventDefault();
          
          const isExpanded = tocContentMobile.style.maxHeight && tocContentMobile.style.maxHeight !== '0px';
          
          if (isExpanded) {
            // Collapse - exact same pattern as sidebar
            tocContentMobile.style.maxHeight = '0px';
            tocChevron.classList.remove('fa-chevron-up');
            tocChevron.classList.add('fa-chevron-down');
            if (tocToggleText) {
              tocToggleText.textContent = 'Show Table of Contents';
            }
            isMobileVisible = false;
          } else {
            // Expand - exact same pattern as sidebar
            tocContentMobile.style.maxHeight = tocContentMobile.scrollHeight + 'px';
            tocChevron.classList.remove('fa-chevron-down');
            tocChevron.classList.add('fa-chevron-up');
            if (tocToggleText) {
              tocToggleText.textContent = 'Hide Table of Contents';
            }
            isMobileVisible = true;
          }
          
          localStorage.setItem('toc-mobile-visible', isMobileVisible.toString());
        });
      }
      
      // Desktop toggle
      if (tocToggleDesktop) {
        tocToggleDesktop.addEventListener('click', () => {
          updateDesktopTOCVisibility(!isDesktopVisible);
        });
      }
      
      // Reset on window resize
      window.addEventListener('resize', () => {
        if (window.innerWidth < 1024) {
          // Mobile: restore mobile state
          updateMobileTOCVisibility(isMobileVisible);
        } else {
          // Desktop: restore desktop state
          updateDesktopTOCVisibility(isDesktopVisible);
        }
      });
    }
    
    // Initialize when DOM is loaded
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initTOCToggle);
    } else {
      initTOCToggle();
    }
  </script>
</BaseLayout>


