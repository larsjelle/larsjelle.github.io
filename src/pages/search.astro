---
import { getCollection } from 'astro:content';
import PageLayout from '../layouts/PageLayout.astro';

const posts = await getCollection('posts');
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

const breadcrumbs = [
  { label: 'Home', href: '/' },
  { label: 'Search', href: '/search' }
];
---

<PageLayout 
  title="Search Posts"
  description="Search through all blog posts"
  breadcrumbs={breadcrumbs}
>
  <div class="max-w-4xl mx-auto">
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
        Search Posts
      </h1>
      <p class="text-xl text-gray-600 dark:text-gray-300">
        Find what you're looking for in our blog archives
      </p>
    </div>

    <!-- Search Input -->
    <div class="mb-8">
      <div class="relative">
        <input
          type="text"
          id="searchInput"
          placeholder="Search posts by title, content, or tags..."
          class="w-full px-4 py-3 pl-12 text-gray-900 dark:text-white bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        />
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <i class="fas fa-search text-gray-400"></i>
        </div>
      </div>
    </div>

    <!-- Filter Options -->
    <div class="mb-8 flex flex-wrap gap-4">
      <div class="flex items-center">
        <label class="text-sm font-medium text-gray-700 dark:text-gray-300 mr-2">
          Filter by:
        </label>
      </div>
      <select id="categoryFilter" class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm">
        <option value="">All Categories</option>
        <!-- Categories will be populated by JavaScript -->
      </select>
      <select id="tagFilter" class="px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg text-sm">
        <option value="">All Tags</option>
        <!-- Tags will be populated by JavaScript -->
      </select>
      <button 
        id="clearFilters"
        class="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-lg text-sm hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors"
      >
        Clear Filters
      </button>
    </div>

    <!-- Search Results -->
    <div id="searchResults">
      <div id="noResults" class="hidden text-center py-12">
        <div class="text-6xl mb-4">üîç</div>
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          No posts found
        </h2>
        <p class="text-gray-600 dark:text-gray-300">
          Try adjusting your search terms or filters.
        </p>
      </div>

      <div id="postsList" class="space-y-6">
        {sortedPosts.map((post) => (
          <article 
            class="post-item bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 p-6"
            data-title={post.data.title.toLowerCase()}
            data-content={post.body.toLowerCase()}
            data-categories={post.data.categories?.join(',').toLowerCase() || ''}
            data-tags={post.data.tags?.join(',').toLowerCase() || ''}
          >
            <div class="flex items-start justify-between mb-4">
              <div class="flex-1">
                <h2 class="text-2xl font-bold mb-2">
                  <a 
                    href={`/posts/${post.slug}`}
                    class="text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200"
                  >
                    {post.data.title}
                  </a>
                </h2>
                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mb-3">
                  <time datetime={post.data.date.toISOString()}>
                    {post.data.date.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  {post.data.categories && post.data.categories.length > 0 && (
                    <div class="flex items-center space-x-2">
                      <span>in</span>
                      {post.data.categories.map(category => (
                        <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded text-xs font-medium">
                          {category}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
            
            {post.data.excerpt && (
              <p class="text-gray-600 dark:text-gray-300 mb-4 leading-relaxed">
                {post.data.excerpt}
              </p>
            )}

            <div class="flex items-center justify-between">
              <div class="flex flex-wrap gap-2">
                {post.data.tags?.map(tag => (
                  <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs font-medium">
                    #{tag}
                  </span>
                ))}
              </div>
              <a 
                href={`/posts/${post.slug}`}
                class="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 font-medium text-sm transition-colors duration-200"
              >
                Read more ‚Üí
              </a>
            </div>
          </article>
        ))}
      </div>
    </div>
  </div>
</PageLayout>

<script>
  // Search functionality
  const searchInput = document.getElementById('searchInput') as HTMLInputElement;
  const categoryFilter = document.getElementById('categoryFilter') as HTMLSelectElement;
  const tagFilter = document.getElementById('tagFilter') as HTMLSelectElement;
  const clearFiltersBtn = document.getElementById('clearFilters') as HTMLButtonElement;
  const postsList = document.getElementById('postsList') as HTMLElement;
  const noResults = document.getElementById('noResults') as HTMLElement;
  const postItems = document.querySelectorAll('.post-item') as NodeListOf<HTMLElement>;

  // Populate filter options
  const categories = new Set<string>();
  const tags = new Set<string>();

  postItems.forEach(item => {
    const itemCategories = item.dataset.categories?.split(',').filter(c => c.trim()) || [];
    const itemTags = item.dataset.tags?.split(',').filter(t => t.trim()) || [];
    
    itemCategories.forEach(cat => categories.add(cat.trim()));
    itemTags.forEach(tag => tags.add(tag.trim()));
  });

  // Populate category filter
  Array.from(categories).sort().forEach(category => {
    const option = document.createElement('option');
    option.value = category;
    option.textContent = category.charAt(0).toUpperCase() + category.slice(1);
    categoryFilter.appendChild(option);
  });

  // Populate tag filter
  Array.from(tags).sort().forEach(tag => {
    const option = document.createElement('option');
    option.value = tag;
    option.textContent = tag.charAt(0).toUpperCase() + tag.slice(1);
    tagFilter.appendChild(option);
  });

  // Search and filter function
  function filterPosts() {
    const searchTerm = searchInput.value.toLowerCase();
    const selectedCategory = categoryFilter.value.toLowerCase();
    const selectedTag = tagFilter.value.toLowerCase();

    let visibleCount = 0;

    postItems.forEach(item => {
      const title = item.dataset.title || '';
      const content = item.dataset.content || '';
      const categories = item.dataset.categories || '';
      const tags = item.dataset.tags || '';

      const matchesSearch = !searchTerm || 
        title.includes(searchTerm) || 
        content.includes(searchTerm) ||
        categories.includes(searchTerm) ||
        tags.includes(searchTerm);

      const matchesCategory = !selectedCategory || categories.includes(selectedCategory);
      const matchesTag = !selectedTag || tags.includes(selectedTag);

      if (matchesSearch && matchesCategory && matchesTag) {
        item.style.display = 'block';
        visibleCount++;
      } else {
        item.style.display = 'none';
      }
    });

    // Show/hide no results message
    if (visibleCount === 0) {
      noResults.style.display = 'block';
      postsList.style.display = 'none';
    } else {
      noResults.style.display = 'none';
      postsList.style.display = 'block';
    }
  }

  // Clear filters function
  function clearFilters() {
    searchInput.value = '';
    categoryFilter.value = '';
    tagFilter.value = '';
    filterPosts();
  }

  // Event listeners
  searchInput.addEventListener('input', filterPosts);
  categoryFilter.addEventListener('change', filterPosts);
  tagFilter.addEventListener('change', filterPosts);
  clearFiltersBtn.addEventListener('click', clearFilters);

  // URL parameter handling for search terms
  const urlParams = new URLSearchParams(window.location.search);
  const queryParam = urlParams.get('q');
  if (queryParam) {
    searchInput.value = queryParam;
    filterPosts();
  }
</script>
